version: '3'

vars:
  SRC: src/
  TESTS: tests/
  PYTHON_VERSIONS:
    sh: cat .python-versions | grep -v '^$' | tr '\n' ' ' | sed 's/[[:space:]]*$//'
  PYTHON_VERSION:
    sh: cat .python-version | head -n1
  TEST_TIMEOUT: 30

tasks:
  output:
    desc: Internal task to output messages silently
    cmds:
      - cmd: echo "{{.MESSAGE}}"
        silent: true
  # === Setup and Environment ===
  
  # Environment validation
  env:check:
    desc: Verify development environment setup
    cmds:
      - task: output
        vars:
          MESSAGE: "Checking Prerequisite versions..."
      - uv --version
      - uv run python --version
      - git --version
      - pipx --version
      - pymarkdownlnt version

  install:
    desc: Install project dependencies (first-time setup)
    deps:
      - sync

  sync:
    desc: Sync project dependencies with uv
    cmds:
      - uv sync --extra dev

  clean:
    desc: Clean up generated files
    cmds:
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - rm -rf .mypy_cache/
      - rm -rf .pytest_cache/
      - rm -rf dist/
      - rm -rf build/
      - rm -rf site/

  # === Development and Running ===
  run:
    desc: Run the application
    cmds:
      - uv run python -m appimage_updater {{.CLI_ARGS}}

  # === Code Quality and Linting ===
  format:
    desc: Format code with ruff (including import sorting) and format markdown files with mdformat
    cmds:
      - uv run ruff check --fix --select I {{.CLI_ARGS | default .SRC}}  # Fix import sorting
      - uv run ruff format {{.CLI_ARGS | default .SRC}}  # Format code
      - cmd: |
          if ! command -v mdformat &> /dev/null; then
            uv tool install mdformat
          fi
        silent: true
      - mdformat {{.CLI_ARGS | default "*.md docs/*.md"}}

  lint:
    desc: Run all linting tasks
    cmds:
      - task: lint:fix
      - task: lint:ruff
      - task: lint:mypy
      - task: lint:markdown
      - task: lint:emoji
      - task: lint:deadcode

  lint:ruff:
    desc: Run linting with ruff
    cmds:
      - uv run ruff check {{.CLI_ARGS | default .SRC}}

  lint:fix:
    desc: Automatically fix linting issues with ruff
    cmds:
      - uv run ruff check --fix {{.CLI_ARGS | default .SRC}}

  lint:fix:tests:
    desc: Automatically fix linting issues with ruff
    cmds:
      - uv run ruff check --fix {{.CLI_ARGS | default .TESTS}}

  lint:emoji:
    desc: Search for emojis in source code, docs, and configuration files
    cmds:
      - cmd: |
          echo "üîç Searching for emojis in codebase..."
          EMOJI_FOUND=0
          
          # Define emoji regex pattern (matches most common emoji ranges)
          EMOJI_PATTERN='[\x{1F600}-\x{1F64F}]|[\x{1F300}-\x{1F5FF}]|[\x{1F680}-\x{1F6FF}]|[\x{1F1E0}-\x{1F1FF}]|[\x{2600}-\x{26FF}]|[\x{2700}-\x{27BF}]|[\x{1F900}-\x{1F9FF}]|[\x{1F018}-\x{1F270}]|[\x{238C}-\x{2454}]|[\x{20D0}-\x{20FF}]'
          
          # Search in source code
          if grep -rn --include="*.py" -P "$EMOJI_PATTERN" src/ 2>/dev/null; then
            echo "‚ùå Emojis found in source code (src/)"
            EMOJI_FOUND=1
          fi
          
          # Search in tests
          if grep -rn --include="*.py" -P "$EMOJI_PATTERN" tests/ 2>/dev/null; then
            echo "‚ùå Emojis found in tests (tests/)"
            EMOJI_FOUND=1
          fi
          
          # Search in docs
          if grep -rn --include="*.md" -P "$EMOJI_PATTERN" docs/ 2>/dev/null; then
            echo "‚ùå Emojis found in documentation (docs/)"
            EMOJI_FOUND=1
          fi
          
          # Search in README.md
          if grep -rn -P "$EMOJI_PATTERN" README.md 2>/dev/null; then
            echo "‚ùå Emojis found in README.md"
            EMOJI_FOUND=1
          fi
          
          # Search in mkdocs.yml
          if grep -rn -P "$EMOJI_PATTERN" mkdocs.yml 2>/dev/null; then
            echo "‚ùå Emojis found in mkdocs.yml"
            EMOJI_FOUND=1
          fi
          
          if [ $EMOJI_FOUND -eq 0 ]; then
            echo "‚úÖ No emojis found in codebase"
          else
            echo "‚ùå Emoji check failed - emojis found in codebase"
            exit 1
          fi
        silent: true

  lint:mypy:
    desc: Run type checking with mypy
    cmds:
      - uv run mypy {{.CLI_ARGS | default .SRC}}

  lint:markdown:
    desc: Lint markdown files with pymarkdownlnt
    cmds:
      - cmd: |
          if ! command -v pymarkdownlnt &> /dev/null; then
            uv tool install pymarkdownlnt
          fi
        silent: true
      - uv run pymarkdownlnt --config .pymarkdown.json scan {{.CLI_ARGS | default "*.md docs/*.md"}} || true

  complexity:
    desc: Analyze code complexity with radon
    cmds:
      - uv run radon cc {{.CLI_ARGS | default .SRC}} --min B

  lint:deadcode:
    desc: Find dead (unreachable/unused) code with deadcode
    cmds:
      - >
        uv run deadcode {{.CLI_ARGS | default .SRC}}
        --ignore-if-decorated-with "@app.command" "@app.callback" "@field_validator" 
        --ignore-names "main" "main_callback" "check" "edit" "list_apps" "show" "repository" "add" "remove" "config"
        "validate_pattern" "validate_download_dir" "validate_symlink_path" "model_post_init" "validate_paths" "apply_global_defaults_to_config"
        "checked_at" "expected" "actual" "duration_seconds" "message" "timestamp" "codename" "distribution_family"
        "print_progress" "print_success" "print_error" "print_warning" "print_info" "print_config_settings"
        "generate_pattern_from_releases" "_try_parse_last_modified_header" "_try_parse_date_header"
        "_extract_version_from_filename" "excepthook" "_print_troubleshooting_tips"
        "_handle_edit_preview_modes" "_apply_edit_updates_to_apps"

  # === Testing ===
  test:
    desc: Run tests with pytest (sequential) - excludes regression tests
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit tests/functional tests/integration tests/e2e {{.CLI_ARGS}}

  test:parallel:
    desc: Run tests with pytest using multiple CPU cores (faster) - excludes regression tests
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit tests/functional tests/integration tests/e2e -n auto {{.CLI_ARGS}}

  test:unit:
    desc: Run unit tests only
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit/ {{.CLI_ARGS}}

  test:functional:
    desc: Run functional tests only
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/functional/ {{.CLI_ARGS}}

  test:integration:
    desc: Run integration tests only
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/integration/ {{.CLI_ARGS}}

  test:e2e:
    desc: Run end-to-end tests to validate core functionality
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/e2e/ -v --tb=short --color=yes --no-cov -n auto

  test:pattern-matching:
    desc: Test pattern matching functionality specifically
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/e2e/test_pattern_matching.py -v
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit/test_intelligent_pattern_generation.py -v

  test:regression:
    desc: Run regression tests to validate fixed issues
    cmds:
    # do not use timeout here as it will cause the test to fail
      - uv run pytest tests/regression/ -v --tb=short --color=yes
      - task: output
        vars:
          MESSAGE: "‚úÖ Regression tests passed - fixed issues remain resolved!"

  test:all:
    desc: Run all tests against all Python versions (excludes regression)
    cmds:
      - cmd: echo "üêç Running tests against all Python versions..."
        silent: true
      - for:
          var: PYTHON_VERSIONS
          split: ' '
        cmd: |
          echo "üìã Testing with Python {{.ITEM}}"
          uv run --python {{.ITEM}} pytest --timeout {{.TEST_TIMEOUT}} tests/unit tests/functional tests/integration tests/e2e --tb=short --color=yes
      - cmd: echo "‚úÖ All Python versions tested successfully!"
        silent: true

  test:coverage:
    desc: Run all tests with coverage reporting (excludes regression tests)
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit tests/functional tests/integration tests/e2e --cov={{.SRC}}appimage_updater --cov-report=xml --cov-report=term-missing --cov-report=html:htmlcov
      - task: output
        vars:
          MESSAGE: "üìä Coverage report saved to htmlcov/index.html"

  # === Quality Checks ===
  check:
    desc: Run all code quality checks including end-to-end tests
    cmds:
      - task: docs:fix:emoji
      - task: format
      - task: lint
      - task: complexity
      - task: test:parallel

  # === Documentation ===
  docs:build:
    desc: Build documentation with MkDocs
    cmds:
      - task: output
        vars:
          MESSAGE: "üìö Building documentation..."
      - uv run mkdocs build {{.CLI_ARGS}} 2>&1 | grep -v "MERMAID2.*Found superfences config" | grep -v "MERMAID2.*Initialization arguments" | grep -v "MERMAID2.*Using javascript library" || true
      - task: output
        vars:
          MESSAGE: "‚úÖ Documentation built successfully in site/"

  docs:serve:
    desc: Serve documentation locally for development
    cmds:
      - task: output
        vars:
          MESSAGE: "üåç Starting documentation server..."
      - uv run mkdocs serve {{.CLI_ARGS}}

  docs:
    desc: Build and serve documentation locally (alias for docs:serve)
    deps:
      - docs:build
      - docs:serve

  docs:fix:emoji:
    desc: Remove emojis from markdown files (*.md and docs/*.md)
    cmds:
      - cmd: |
          echo "Removing emojis from markdown files..."
          
          # Define emoji regex pattern (matches most common emoji ranges)
          EMOJI_PATTERN='[\x{1F600}-\x{1F64F}]|[\x{1F300}-\x{1F5FF}]|[\x{1F680}-\x{1F6FF}]|[\x{1F1E0}-\x{1F1FF}]|[\x{2600}-\x{26FF}]|[\x{2700}-\x{27BF}]|[\x{1F900}-\x{1F9FF}]|[\x{1F018}-\x{1F270}]|[\x{238C}-\x{2454}]|[\x{20D0}-\x{20FF}]'
          
          # Common emoji replacements
          declare -A REPLACEMENTS=(
            ["‚úÖ"]="PASS"
            ["‚ùå"]="FAIL" 
            ["‚ö†Ô∏è"]="WARNING"
            ["üîç"]="SEARCH"
            ["üì¶"]="PACKAGE"
            ["üêß"]="LINUX"
            ["üöÄ"]="DEPLOY"
            ["üéØ"]="TARGET"
            ["üèÜ"]="SUCCESS"
            ["üéâ"]="COMPLETE"
            ["üìä"]="REPORT"
            ["üß™"]="TEST"
            ["üî¥"]="HIGH"
            ["üü°"]="MEDIUM"
            ["üü¢"]="LOW"
            ["üìö"]="DOCS"
            ["üåç"]="SERVER"
            ["üèóÔ∏è"]="BUILD"
            ["üìà"]="BUMP"
            ["üìù"]="COMMIT"
            ["üêç"]="PYTHON"
            ["üìã"]="LIST"
            [" ‚úì "]="DONE"
          )
          
          # Process all markdown files
          find . -name "*.md" -o -path "./docs/*.md" | while read -r file; do
            if [ -f "$file" ]; then
              # echo "Processing: $file"
              
              # Create backup
              cp "$file" "$file.bak"
              
              # Apply specific replacements first
              for emoji in "${!REPLACEMENTS[@]}"; do
                replacement="${REPLACEMENTS[$emoji]}"
                sed -i "s/$emoji/$replacement/g" "$file"
              done
              
              # Remove any remaining emojis using perl regex
              perl -i -pe "s/$EMOJI_PATTERN//g" "$file"
              
              # Check if file was modified
              if ! cmp -s "$file" "$file.bak"; then
                echo "  - Emojis removed from $file"
              # else
                # echo "  - No emojis found in $file"
              fi
              
              # Remove backup
              rm "$file.bak"
            fi
          done
          
          echo "Emoji removal complete!"
        silent: true

  # === Build and Release ===
  build:
    desc: Build distribution packages
    deps:
      - clean
    cmds:
      - task: output
        vars:
          MESSAGE: "üèóÔ∏è  Building AppImage Updater distribution packages..."
      - uv build {{.CLI_ARGS}}
      - task: output
        vars:
          MESSAGE: "‚úÖ Build complete! Packages created in dist/"
      - ls -la dist/

  version:pyproject:
    desc: Extract version from pyproject.toml (internal task)
    cmds:
      - python3 -c "import tomllib; f = open('pyproject.toml', 'rb'); data = tomllib.load(f); f.close(); print(data['project']['version'])"
    silent: true

  version:
    desc: Display the current project version
    cmds:
      - task: output
        vars:
          MESSAGE: "v$(task version:pyproject)"

  version:bump:
    desc: Bump the patch version, build, and commit changes
    cmds:
      - task: output
        vars:
          MESSAGE: "üîç Checking for uncommitted changes..."
      - |
        if [ -n "$(git status --porcelain)" ]; then
          task output MESSAGE="‚ùå Error: There are uncommitted changes. Please commit or stash them first."
          git status --short
          exit 1
        else
          task output MESSAGE="‚úÖ Working directory is clean"
        fi
      - task: output
        vars:
          MESSAGE: "üìà Bumping version..."
      - uv run version_bumper bump patch
      - task: output
        vars:
          MESSAGE: "‚úÖ Version bumped! New version:"
      - task: version
      - task: output
        vars:
          MESSAGE: "üèóÔ∏è  Building package..."
      - task: build
      - task: output
        vars:
          MESSAGE: "üìù Committing version bump..."
      - |
        NEW_VERSION=$(task version:pyproject)
        git add pyproject.toml
        git commit -m "chore: bump version to v$NEW_VERSION"
        task output MESSAGE="‚úÖ Committed version bump to v$NEW_VERSION"

  deploy:
    desc: Deploy the built package locally with pipx
    deps:
      - build
    cmds:
      - task: output
        vars:
          MESSAGE: "üöÄ Installing locally with pipx..."
      - pipx install --force dist/*.whl
      - task: output
        vars:
          MESSAGE: "‚úÖ Successfully deployed appimage-updater v$(task version) locally!"

  version:tag:
    desc: Create and push a git tag for the current version
    deps:
      - version
    cmds:
      - cmd:  VERSION=$(task version:pyproject)
        silent: true
      - task: output
        vars:
          MESSAGE: "Creating tag v$VERSION..."
      - cmd:  git tag "v$VERSION"
      - cmd:  git push origin "v$VERSION"
      - task: output
        vars:
          MESSAGE: "‚úÖ Tag v$VERSION created and pushed to origin!"

  # === CI/CD Pipeline ===
  ci:
    desc: Complete CI pipeline - run all checks, build, docs, and show version before pushing to GitHub
    cmds:
      - task: output
        vars:
          MESSAGE: "üöÄ Starting CI pipeline..."
      - task: check
      - task: build
      - task: docs:build
      - task: version
      - task: output
        vars:
          MESSAGE: "‚úÖ CI pipeline completed successfully! Ready to push to GitHub üéâ"

  # === Default ===
  default:
    desc: Show available tasks
    cmds:
      - task --list
