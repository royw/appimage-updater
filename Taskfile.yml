version: '3'

tasks:
  install:
    desc: Install project dependencies
    cmds:
      - uv sync --extra dev

  typecheck:
    desc: Run type checking with mypy
    cmds:
      - uv run mypy {{.CLI_ARGS | default "src/"}}

  lint:
    desc: Run linting with ruff
    cmds:
      - uv run ruff check {{.CLI_ARGS | default "src/"}}

  format:
    desc: Format code with ruff
    cmds:
      - uv run ruff format {{.CLI_ARGS | default "src/"}}

  test:
    desc: Run tests with pytest
    cmds:
      - uv run pytest {{.CLI_ARGS}}

  test:e2e:
    desc: Run end-to-end tests to validate core functionality
    cmds:
      - uv run pytest tests/test_e2e.py -v --tb=short --color=yes --no-cov

  test:e2e-coverage:
    desc: Run end-to-end tests with coverage reporting
    cmds:
      - uv run pytest tests/test_e2e.py -v --tb=short --color=yes --cov=src/appimage_updater --cov-report=term-missing --cov-report=html:htmlcov
      - echo "üìä Coverage report saved to htmlcov/index.html"

  test:smoke:
    desc: Run quick smoke test to validate basic functionality
    cmds:
      - uv run pytest tests/test_e2e.py::test_integration_smoke_test -v
      - echo "‚úÖ Basic functionality verified!"

  test:pattern-matching:
    desc: Test pattern matching functionality specifically
    cmds:
      - uv run pytest tests/test_e2e.py::TestPatternMatching -v
      - uv run pytest tests/test_e2e.py::test_version_extraction_patterns -v

  complexity:
    desc: Analyze code complexity with radon
    cmds:
      - uv run radon cc {{.CLI_ARGS | default "src/ --min C"}}

  deadcode:
    desc: Find dead (unreachable/unused) code with deadcode
    cmds:
      - >
        uv run deadcode {{.CLI_ARGS | default "src/"}}
        --ignore-if-decorated-with "@app.command" "@app.callback" "@field_validator" 
        --ignore-names "main" "check" "init" "list_apps" "show" "DownloadError" "model_post_init"
        "validate_pattern" "validate_download_dir" "validate_symlink_path"
        "created_at" "tag_name" "checked_at" "expected" "actual" "duration_seconds"

  test:all:
    desc: Run all tests including end-to-end validation
    deps:
      - test
      - test:e2e

  check:
    desc: Run all code quality checks including end-to-end tests
    deps:
      - format
      - typecheck
      - lint
      - complexity
      - test:all

  run:
    desc: Run the application
    cmds:
      - uv run python -m appimage_updater {{.CLI_ARGS}}

  docs:build:
    desc: Build documentation with MkDocs
    cmds:
      - echo "üìö Building documentation..."
      - uv run mkdocs build {{.CLI_ARGS}}
      - echo "‚úÖ Documentation built successfully in site/"

  docs:serve:
    desc: Serve documentation locally for development
    cmds:
      - echo "üåç Starting documentation server..."
      - uv run mkdocs serve {{.CLI_ARGS}}

  docs:
    desc: Build and serve documentation locally (alias for docs:serve)
    deps:
      - docs:serve

  build:
    desc: Build distribution packages (wheel and sdist)
    deps:
      - clean
      - check
    cmds:
      - echo "üèóÔ∏è  Building AppImage Updater distribution packages..."
      - uv build {{.CLI_ARGS}}
      - echo "‚úÖ Build complete! Packages created in dist/"
      - ls -la dist/

  clean:
    desc: Clean up generated files
    cmds:
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - rm -rf .mypy_cache/
      - rm -rf .pytest_cache/
      - rm -rf dist/
      - rm -rf build/
      - rm -rf site/

  dev:
    desc: Set up development environment
    deps:
      - install
    cmds:
      - echo "Development environment ready!"

  default:
    desc: Show available tasks
    cmds:
      - task --list
