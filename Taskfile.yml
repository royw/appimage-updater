version: '3'

vars:
  SRC: src/
  TESTS: tests/
  TESTS_CORE: tests/unit/ tests/functional/ tests/integration/
  SCRIPTS: scripts/
  PYTHON_VERSIONS:
    sh: cat .python-versions | grep -v '^$' | tr '\n' ' ' | sed 's/[[:space:]]*$//'
  PYTHON_VERSION:
    sh: cat .python-version | head -n1
  TEST_TIMEOUT: 30
  # Global emoji replacements dictionary - single source of truth
  # Format: "emoji:replacement emoji:replacement ..."
  # Used by both lint:emoji (keys) and fix:emoji (full mapping)
  EMOJI_REPLACEMENTS_MAP: '✅:PASS ❌:FAIL ⚠️:WARNING 🔍:SEARCH 📦:PACKAGE 🐧:LINUX 🚀:DEPLOY 🎯:TARGET 🏆:SUCCESS 🎉:COMPLETE 📊:REPORT 🧪:TEST 🔴:HIGH 🟡:MEDIUM 🟢:LOW 📚:DOCS 🌍:SERVER 🏗️:BUILD 📈:BUMP 📝:COMMIT 🐍:PYTHON 📋:LIST ✓:DONE 📁:FOLDER 🌐:NETWORK 🎭:MOCK ⚡:EXECUTE 📤:STDOUT 📥:STDERR 💥:EXCEPTION 🔧:VERSION 📄:FILE 🌳:TREE 🏁:COMPLETE 🔒:LOCK 🔓:UNLOCK 🐛:BUG 🛠️:TOOLS 🚨:0'

tasks:
# === Default ===
  default:
    desc: Show available tasks
    cmds:
      - task --list --sort none

# === Internal ===
  _output:
    desc: Internal task to output messages silently
    cmds:
      - cmd: echo "{{.MESSAGE}}"
        silent: true

  # === Setup and Environment ===
  
  # Environment validation
  env:check:
    desc: Verify development environment setup
    cmds:
      - task: _output
        vars:
          MESSAGE: "Checking Prerequisite versions..."
      - uv --version
      - uv run python --version
      - git --version
      - pipx --version
      - pymarkdownlnt version

  install:
    desc: Install project dependencies (first-time setup) into .venv/
    deps:
      - env:check
      - sync

  sync:
    desc: Sync project dependencies with uv into .venv/
    cmds:
      - uv sync --extra dev

  resync:
    desc: Resync project dependencies by first deleting .venv/ and then syncing with uv into .venv/
    cmds:
      - rm -rf .venv/
      - task: sync

  clean:
    desc: Clean up generated files
    cmds:
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - rm -rf .mypy_cache/
      - rm -rf .pytest_cache/
      - rm -rf dist/
      - rm -rf build/
      - rm -rf site/

  # === Code Quality ===
  format:
    desc: Format code with ruff (including import sorting) and format markdown files with mdformat
    deps:
      - task: format:src
      - task: format:markdown

  format:src:
    desc: Format source code with ruff (including import sorting)
    cmds:
      - uv run ruff check --fix --select I {{.CLI_ARGS | default .SRC}}  # Fix import sorting
      - uv run ruff format {{.CLI_ARGS | default .SRC}}  # Format code

  format:markdown:
    desc: Format markdown files with mdformat
    cmds:
      - cmd: |
          if ! command -v mdformat &> /dev/null; then
            uv tool install mdformat
          fi
        silent: true
      - sed -i 's/[[:space:]]*$//' {{.CLI_ARGS | default "*.md docs/*.md"}}
      - mdformat {{.CLI_ARGS | default "*.md docs/*.md"}}

  format:tests:
    desc: Format tests with ruff (including import sorting)
    deps:
      - lint:fix:tests
    cmds:
      - uv run ruff format {{.CLI_ARGS | default .TESTS}}  # Format code

  format:scripts:
    desc: Format scripts with ruff (including import sorting)
    cmds:
      - uv run ruff check --fix --select I {{.CLI_ARGS | default .SCRIPTS}}  # Fix import sorting
      - uv run ruff format {{.CLI_ARGS | default .SCRIPTS}}  # Format code

  fix:emoji:
    desc: Remove emojis from markdown and test files (*.md, docs/*.md, tests/*.py)
    cmds:
      - cmd: |
          python3 << 'PYTHON_SCRIPT'
          import os
          import glob
          from pathlib import Path
          
          # Build emoji replacements map from Taskfile variable
          EMOJI_MAP = '{{.EMOJI_REPLACEMENTS_MAP}}'
          
          # Parse the map into a dictionary
          replacements = {}
          for pair in EMOJI_MAP.split():
              if ':' in pair:
                  emoji, replacement = pair.split(':', 1)
                  replacements[emoji] = replacement
          
          print("Removing emojis from markdown and test files...")
          
          def process_file(filepath):
              """Process a single file and replace emojis."""
              try:
                  with open(filepath, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  original_content = content
                  
                  # Apply all emoji replacements
                  for emoji, replacement in replacements.items():
                      content = content.replace(emoji, replacement)
                  
                  # Only write if content changed
                  if content != original_content:
                      with open(filepath, 'w', encoding='utf-8') as f:
                          f.write(content)
                      print(f"  - Emojis removed from {filepath}")
              except Exception as e:
                  print(f"  ! Error processing {filepath}: {e}")
          
          print("Processing markdown files...")
          # Process markdown files in project root (max depth 1)
          for md_file in glob.glob("*.md"):
              process_file(md_file)
          
          # Process markdown files in docs/ directory
          if os.path.isdir("docs"):
              for md_file in Path("docs").rglob("*.md"):
                  process_file(str(md_file))
          
          print("Processing test Python files...")
          # Process all test python files (including subdirectories)
          if os.path.isdir("tests"):
              for py_file in Path("tests").rglob("*.py"):
                  process_file(str(py_file))
          
          print("Emoji removal complete!")
          PYTHON_SCRIPT
        silent: true

  # === Linting ===
  _check_tmp:
    desc: Internal task to check for hardcoded /tmp/ paths
    cmds:
      - cmd: |
          echo "Checking for hardcoded /tmp/ paths..."
          TMP_FOUND=0
          TMP_COUNT=0
          SEARCH_PATH="{{.SEARCH_PATH}}"
          
          # Search for "/tmp/" in all Python files and count occurrences
          # grep returns exit code 1 if no matches found, so we use || true to prevent script failure
          TMP_RESULTS=$(grep -rn --include="*.py" '"/tmp/' $SEARCH_PATH 2>/dev/null || true)
          if [ -n "$TMP_RESULTS" ]; then
            echo "$TMP_RESULTS"
            TMP_COUNT=$(echo "$TMP_RESULTS" | wc -l)
            echo "FAIL Hardcoded /tmp/ paths found - use tmp_path fixture instead"
            TMP_FOUND=1
          fi
          
          if [ $TMP_FOUND -eq 0 ]; then
            echo "PASS No hardcoded /tmp/ paths found"
            exit 0
          else
            echo "FAIL Lint failed - $TMP_COUNT hardcoded /tmp/ paths found"
            echo "Fix: Replace hardcoded /tmp/ paths with pytest's tmp_path fixture"
            exit 1
          fi
        silent: true

  lint:
    desc: Run all linting tasks
    cmds:
      - task: lint:fix
      - task: lint:ruff
      - task: lint:mypy
      - task: lint:markdown
      - task: lint:emoji
      - task: lint:deadcode
      - task: _check_tmp
        vars:
          SEARCH_PATH: "{{.SRC}}"

  lint:tests:
    desc: Run linting with ruff and check for hardcoded /tmp/ paths
    cmds:
      - uv run ruff check --fix --select I {{.CLI_ARGS | default .TESTS_CORE}}
      - uv run mypy {{.CLI_ARGS | default .TESTS_CORE}}
      - task: _check_tmp
        vars:
          SEARCH_PATH: "{{.TESTS}}"

  lint:ruff:
    desc: Run linting with ruff
    cmds:
      - uv run ruff check {{.CLI_ARGS | default .SRC}}

  lint:mypy:
    desc: Run type checking with mypy
    cmds:
      - uv run mypy {{.CLI_ARGS | default .SRC}}

  lint:fix:
    desc: Automatically fix linting issues with ruff
    cmds:
      - uv run ruff check --fix --select I {{.CLI_ARGS | default .SRC}}

  lint:fix:tests:
    desc: Automatically fix linting issues with ruff
    cmds:
      - uv run ruff check --fix --select I {{.CLI_ARGS | default .TESTS}}

  lint:scripts:
    desc: Run linting with ruff and check for hardcoded /tmp/ paths
    cmds:
      - uv run ruff check --fix --select I {{.CLI_ARGS | default .SCRIPTS}}
      - uv run mypy {{.CLI_ARGS | default .SCRIPTS}}
      - task: _check_tmp
        vars:
          SEARCH_PATH: "{{.SCRIPTS}}"
  
  lint:markdown:
    desc: Lint markdown files with pymarkdownlnt
    cmds:
      - cmd: |
          if ! command -v pymarkdownlnt &> /dev/null; then
            uv tool install pymarkdownlnt
          fi
        silent: true
      - uv run pymarkdownlnt --config .pymarkdown.json scan {{.CLI_ARGS | default "*.md docs/*.md"}} || true

  lint:emoji:
    desc: Search for emojis in source code, docs, and configuration files
    cmds:
      - cmd: |
          echo "SEARCH Searching for emojis in codebase..."
          EMOJI_FOUND=0
          
          # Extract emoji keys from global EMOJI_REPLACEMENTS_MAP
          EMOJI_MAP='{{.EMOJI_REPLACEMENTS_MAP}}'
          
          # Extract just the emojis (keys before the colon)
          EMOJI_LIST=$(echo "$EMOJI_MAP" | tr ' ' '\n' | cut -d':' -f1)
          
          # Search in source code
          if echo "$EMOJI_LIST" | xargs -I {} grep -rn --include="*.py" -F {} src/ 2>/dev/null; then
            echo "FAIL Emojis found in source code (src/)"
            EMOJI_FOUND=1
          fi
          
          # Search in tests
          if echo "$EMOJI_LIST" | xargs -I {} grep -rn --include="*.py" -F {} tests/ 2>/dev/null; then
            echo "FAIL Emojis found in tests (tests/)"
            EMOJI_FOUND=1
          fi
          
          # Search in docs
          if echo "$EMOJI_LIST" | xargs -I {} grep -rn --include="*.md" -F {} docs/ 2>/dev/null; then
            echo "FAIL Emojis found in documentation (docs/)"
            EMOJI_FOUND=1
          fi
          
          # Search in README.md
          if echo "$EMOJI_LIST" | xargs -I {} grep -rn -F {} README.md 2>/dev/null; then
            echo "FAIL Emojis found in README.md"
            EMOJI_FOUND=1
          fi
          
          # Search in mkdocs.yml
          if echo "$EMOJI_LIST" | xargs -I {} grep -rn -F {} mkdocs.yml 2>/dev/null; then
            echo "FAIL Emojis found in mkdocs.yml"
            EMOJI_FOUND=1
          fi
          
          if [ $EMOJI_FOUND -eq 0 ]; then
            echo "PASS No emojis found in codebase"
          else
            echo "FAIL Emoji check failed - emojis found in codebase"
            exit 1
          fi
        silent: true

  lint:deadcode:
    desc: Find dead (unreachable/unused) code with deadcode (config in pyproject.toml)
    cmds:
      - cmd: echo "Checking deadcode..."
        silent: true
      - uv run deadcode {{.CLI_ARGS | default .SRC}}
    silent: true

  lint:duplication:
    desc: Check for duplicate code using pylint
    cmds:
      - cmd: echo "Checking for code duplication..."
        silent: true
      - uv run pylint --disable=all --enable=duplicate-code {{.CLI_ARGS | default .SRC}}

  # === Metrics ===
  metrics:
    desc: Display comprehensive project metrics summary (config in pyproject.toml)
    cmds:
      - uv run python scripts/dev-metrics.py

  complexity:
    desc: Analyze code complexity with radon
    cmds:
      - cmd: echo "Checking complexity..."
        silent: true
      - cmd: |
          # Read exclusion list from pyproject.toml
          EXCLUDED=$(uv run --quiet python -c "
          import sys
          import tomllib
          try:
              with open('pyproject.toml', 'rb') as f:
                  data = tomllib.load(f)
              project_name = data.get('project', {}).get('name')
              if not project_name:
                  print('', file=sys.stderr)
                  sys.exit(0)
              excludes = data.get('tool', {}).get(project_name, {}).get('complexity', {}).get('exclude', [])
              if not excludes:
                  print('', file=sys.stderr)
                  sys.exit(0)
              # Escape dots and underscores for regex
              pattern = '|'.join(e.replace('.', r'\.').replace('_', r'_') for e in excludes)
              print(pattern)
          except Exception as e:
              print(f'Warning: Could not read exclusion list from pyproject.toml: {e}', file=sys.stderr)
              sys.exit(0)
          " 2>/dev/null)
          
          if [ -z "$EXCLUDED" ]; then
            # No exclusion list, show all results
            uv run radon cc --show-complexity {{.CLI_ARGS | default .SRC}} --min B
          else
            OUTPUT=$(uv run radon cc --show-complexity {{.CLI_ARGS | default .SRC}} --min B | \
            grep -vE "($EXCLUDED)")
            
            if [ -z "$OUTPUT" ] || echo "$OUTPUT" | grep -qE "^src/.*\.py$" && ! echo "$OUTPUT" | grep -qE "^\s+[MFC]"; then
              echo "✅ No complexity issues found (all B-rated functions are in exclusion list)"
            else
              echo "$OUTPUT"
            fi
          fi
        silent: true

  # === Testing ===
  test:
    desc: Run tests with pytest (sequential) - excludes regression tests - full coverage reporting
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit tests/functional tests/integration tests/e2e {{.CLI_ARGS}}

  test:parallel:
    desc: Run tests with pytest - unit/functional/integration in parallel, E2E serially - excludes regression tests - summary coverage reporting
    cmds:
      - bash -c 'set -o pipefail; uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit tests/functional tests/integration tests/e2e -n auto {{.CLI_ARGS}} 2>&1 | grep -Pv "^src/\S+\s+\d+\s+\d+\s+\d+%$"'

  test:unit:
    desc: Run unit tests only - summary coverage reporting
    cmds:
      - bash -c 'set -o pipefail; uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit/ {{.CLI_ARGS}} 2>&1 | grep -Pv "^src/\S+\s+\d+\s+\d+\s+\d+%$"'

  test:functional:
    desc: Run functional tests only - summary coverage reporting
    cmds:
      - bash -c 'set -o pipefail; uv run pytest --timeout {{.TEST_TIMEOUT}} tests/functional/ {{.CLI_ARGS}} 2>&1 | grep -Pv "^src/\S+\s+\d+\s+\d+\s+\d+%$"'

  test:integration:
    desc: Run integration tests only - summary coverage reporting
    cmds:
      - bash -c 'set -o pipefail; uv run pytest --timeout {{.TEST_TIMEOUT}} tests/integration/ {{.CLI_ARGS}} 2>&1 | grep -Pv "^src/\S+\s+\d+\s+\d+\s+\d+%$"'

  test:e2e:
    desc: Run end-to-end tests to validate core functionality (serially for test isolation) - summary coverage reporting
    cmds:
      - bash -c 'set -o pipefail; uv run pytest --timeout {{.TEST_TIMEOUT}} tests/e2e/ -v --tb=short --color=yes --no-cov 2>&1 | grep -Pv "^src/\S+\s+\d+\s+\d+\s+\d+%$"'

  test:pattern-matching:
    desc: Test pattern matching functionality specifically - summary coverage reporting
    cmds:
      - bash -c 'set -o pipefail; uv run pytest --timeout {{.TEST_TIMEOUT}} tests/e2e/test_pattern_matching.py -v 2>&1 | grep -Pv "^src/\S+\s+\d+\s+\d+\s+\d+%$"'
      - bash -c 'set -o pipefail; uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit/test_intelligent_pattern_generation.py -v 2>&1 | grep -Pv "^src/\S+\s+\d+\s+\d+\s+\d+%$"'

  test:regression:
    desc: Run regression tests to validate fixed issues (uses network) - full coverage reporting
    cmds:
    # do not use timeout here as it will cause the test to fail
      - uv run pytest tests/regression/ -v --tb=short --color=yes
      - task: _output
        vars:
          MESSAGE: "✅ Regression tests passed - fixed issues remain resolved!"

  test:all:
    desc: Run all tests against all Python versions (excludes regression) - summary coverage reporting
    cmds:
      - cmd: echo "🐍 Running tests against all Python versions..."
        silent: true
      - for:
          var: PYTHON_VERSIONS
          split: ' '
        cmd: |
          echo "📋 Testing with Python {{.ITEM}}"
          bash -c 'set -o pipefail; uv run --python {{.ITEM}} pytest --timeout {{.TEST_TIMEOUT}} tests/unit tests/functional tests/integration tests/e2e --tb=short --color=yes 2>&1 | grep -Pv "^src/\S+\s+\d+\s+\d+\s+\d+%$"'
      - cmd: echo "✅ All Python versions tested successfully!"
        silent: true

  test:coverage:
    desc: Run all tests with coverage reporting (excludes regression tests) - full coverage reporting
    cmds:
      - uv run pytest --timeout {{.TEST_TIMEOUT}} tests/unit tests/functional tests/integration tests/e2e --cov={{.SRC}}appimage_updater --cov-report=xml --cov-report=term-missing --cov-report=html:htmlcov
      - task: _output
        vars:
          MESSAGE: "📊 Coverage report saved to htmlcov/index.html"

  # === Documentation ===
  docs:build:
    desc: Build documentation with MkDocs
    cmds:
      - task: _output
        vars:
          MESSAGE: "📚 Building documentation..."
      - uv run mkdocs build {{.CLI_ARGS}} 2>&1 | grep -v "MERMAID2.*Found superfences config" | grep -v "MERMAID2.*Initialization arguments" | grep -v "MERMAID2.*Using javascript library" || true
      - task: _output
        vars:
          MESSAGE: "✅ Documentation built successfully in site/"

  docs:serve:
    desc: Serve documentation locally for development
    cmds:
      - task: _output
        vars:
          MESSAGE: "🌍 Starting documentation server..."
      - uv run mkdocs serve {{.CLI_ARGS}}

  docs:
    desc: Build and serve documentation locally
    deps:
      - docs:build
      - docs:serve

  # === Version ===
  version:pyproject:
    desc: Extract version from pyproject.toml (internal task)
    cmds:
      - python3 -c "import tomllib; f = open('pyproject.toml', 'rb'); data = tomllib.load(f); f.close(); print(data['project']['version'])"
    silent: true

  version:
    desc: Display the current project version
    cmds:
      - task: _output
        vars:
          MESSAGE: "v$(task version:pyproject)"

  # === Build Packages ===

  build:
    desc: Build distribution packages
    deps:
      - clean
    cmds:
      - task: _output
        vars:
          MESSAGE: "🏗️  Building AppImage Updater distribution packages..."
      - uv build {{.CLI_ARGS}}
      - task: _output
        vars:
          MESSAGE: "✅ Build complete! Packages created in dist/"
      - ls -la dist/

# === Development Workflow ===

  # === Quality Checks ===
  check:
    desc: Run all code quality checks including end-to-end tests
    cmds:
      - task: fix:emoji
      - task: format
      - task: lint
      - task: complexity
      - task: test:parallel

  # === Build and Release ===
  make:
    desc: Complete build pipeline - run all checks, build, docs, and show version
    cmds:
      - task: _output
        vars:
          MESSAGE: "🚀 Starting build pipeline..."
      - task: check
      - task: build
      - task: docs:build
      - task: version
      - task: _output
        vars:
          MESSAGE: "✅ Build pipeline completed successfully! Ready to push to GitHub 🎉"

  version:bump:
    desc: Bump the patch version, update changelog, build, and commit changes
    cmds:
      - task: _output
        vars:
          MESSAGE: "🔍 Checking for uncommitted changes..."
      - |
        if [ -n "$(git status --porcelain)" ]; then
          task _output MESSAGE="❌ Error: There are uncommitted changes. Please commit or stash them first."
          git status --short
          exit 1
        else
          task _output MESSAGE="✅ Working directory is clean"
        fi
      - task: _output
        vars:
          MESSAGE: "📝 Checking CHANGELOG.md..."
      - |
        # Check if there are unreleased changes in CHANGELOG
        if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
          task _output MESSAGE="❌ Error: No [Unreleased] section found in CHANGELOG.md"
          exit 1
        fi
        
        # Show current unreleased section to user
        task _output MESSAGE="📋 Current [Unreleased] section:"
        echo "----------------------------------------"
        sed -n '/## \[Unreleased\]/,/## \[/p' CHANGELOG.md | head -n -1
        echo "----------------------------------------"
        
        # Check if unreleased section has content
        if ! grep -A 5 "## \[Unreleased\]" CHANGELOG.md | grep -q "^- \|^### "; then
          task _output MESSAGE="❌ Error: [Unreleased] section is empty"
          task _output MESSAGE="💡 Please add release notes to CHANGELOG.md before bumping version"
          exit 1
        fi
        
        # Always ask user to confirm the changelog is complete
        echo ""
        read -p "Is the CHANGELOG.md complete for this release? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          task _output MESSAGE="❌ Aborted. Please update CHANGELOG.md and try again."
          exit 1
        fi
        task _output MESSAGE="✅ CHANGELOG.md confirmed ready for release"
      - task: _output
        vars:
          MESSAGE: "📈 Bumping version..."
      - uv run version_bumper bump patch
      - task: _output
        vars:
          MESSAGE: "✅ Version bumped! New version:"
      - task: version
      - task: _output
        vars:
          MESSAGE: "📝 Updating CHANGELOG.md..."
      - |
        NEW_VERSION=$(task version:pyproject)
        TODAY=$(date +%Y-%m-%d)
        
        # Replace [Unreleased] header with new version and add new [Unreleased] section
        # This preserves all content under [Unreleased] and moves it to the new version
        sed -i.bak "s/## \[Unreleased\]/## [Unreleased]\n\n## [$NEW_VERSION] - $TODAY/" CHANGELOG.md
        
        rm CHANGELOG.md.bak
        task _output MESSAGE="✅ Updated CHANGELOG.md with version $NEW_VERSION"
      - task: _output
        vars:
          MESSAGE: "🏗️  Building package..."
      - task: build
      - task: _output
        vars:
          MESSAGE: "📝 Committing version bump and changelog..."
      - |
        NEW_VERSION=$(task version:pyproject)
        git add pyproject.toml CHANGELOG.md
        git commit -m "chore: bump version to v$NEW_VERSION"
        task _output MESSAGE="✅ Committed version bump to v$NEW_VERSION"

  deploy:
    desc: Deploy the built package locally with pipx
    deps:
      - build
    cmds:
      - task: _output
        vars:
          MESSAGE: "🚀 Installing locally with pipx..."
      - pipx install --force dist/*.whl
      - task: _output
        vars:
          MESSAGE: "✅ Successfully deployed appimage-updater v$(task version) locally!"

  version:tag:
    desc: Create and push a git tag for the current version
    deps:
      - version
    cmds:
      - cmd:  VERSION=$(task version:pyproject)
        silent: true
      - task: _output
        vars:
          MESSAGE: "Creating tag v$VERSION..."
      - cmd:  git tag "v$VERSION"
      - cmd:  git push origin "v$VERSION"
      - task: _output
        vars:
          MESSAGE: "✅ Tag v$VERSION created and pushed to origin!"

  # === CI/CD Pipeline ===
  ci:
    desc: Run GitHub CI build locally using scripts/ci-local.sh.  This is the same pipeline that runs on GitHub Actions.
    cmds:
      - bash scripts/ci-local.sh

  # === Development and Running ===
  run:
    desc: Run the application
    cmds:
      - uv run python -m appimage_updater {{.CLI_ARGS}}
