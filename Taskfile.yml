version: '3'

tasks:
  sync:
    desc: Sync project dependencies with uv
    cmds:
      - uv sync --extra dev

  install:
    desc: Install project dependencies (first-time setup)
    deps:
      - sync

  typecheck:
    desc: Run type checking with mypy
    cmds:
      - uv run mypy {{.CLI_ARGS | default "src/"}}

  lint:
    desc: Run linting with ruff
    cmds:
      - uv run ruff check {{.CLI_ARGS | default "src/"}}

  fix:
    desc: Automatically fix linting issues with ruff
    cmds:
      - uv run ruff check --fix {{.CLI_ARGS | default "src/"}}

  format:
    desc: Format code with ruff and markdown files with mdformat
    cmds:
      - uv run ruff format {{.CLI_ARGS | default "src/"}}
      - cmd: |
          if ! command -v mdformat &> /dev/null; then
            echo "❌ mdformat not found. Please install it with:"
            echo "   uv tool install mdformat"
            echo "   or: pipx install mdformat"
            exit 1
          fi
        silent: true
      - mdformat {{.CLI_ARGS | default "*.md docs/ *.md"}}

  test:
    desc: Run tests with pytest (sequential)
    cmds:
      - uv run pytest {{.CLI_ARGS}}

  test:parallel:
    desc: Run tests with pytest using multiple CPU cores (faster)
    cmds:
      - uv run pytest -n auto {{.CLI_ARGS}}

  test:parallel-fast:
    desc: Run tests using 8 cores (good balance of speed and reliability)
    cmds:
      - uv run pytest -n 8 {{.CLI_ARGS}}

  test:e2e:
    desc: Run end-to-end tests to validate core functionality
    cmds:
      - uv run pytest tests/test_e2e.py -v --tb=short --color=yes --no-cov -n auto

  test:e2e-coverage:
    desc: Run end-to-end tests with coverage reporting
    cmds:
      - uv run pytest tests/test_e2e.py -v --tb=short --color=yes --cov=src/appimage_updater --cov-report=term-missing --cov-report=html:htmlcov -n auto
      - echo "📊 Coverage report saved to htmlcov/index.html"

  test:smoke:
    desc: Run quick smoke test to validate basic functionality
    cmds:
      - uv run pytest tests/test_e2e.py::test_integration_smoke_test -v
      - echo "✅ Basic functionality verified!"

  test:pattern-matching:
    desc: Test pattern matching functionality specifically
    cmds:
      - uv run pytest tests/test_e2e.py::TestPatternMatching -v
      - uv run pytest tests/test_e2e.py::test_version_extraction_patterns -v

  test:regression:
    desc: Run regression tests to validate fixed issues
    cmds:
      - uv run pytest tests/test_add_regression.py -v --tb=short --color=yes
      - echo "✅ Regression tests passed - fixed issues remain resolved!"

  complexity:
    desc: Analyze code complexity with radon
    cmds:
      - uv run radon cc {{.CLI_ARGS | default "src/ --min C"}}

  deadcode:
    desc: Find dead (unreachable/unused) code with deadcode
    cmds:
      - >
        uv run deadcode {{.CLI_ARGS | default "src/"}}
        --ignore-if-decorated-with "@app.command" "@app.callback" "@field_validator" 
        --ignore-names "main" "check" "init" "list_apps" "show" "edit" "DownloadError" "model_post_init"
        "validate_pattern" "validate_download_dir" "validate_symlink_path" "generate_appimage_pattern"
        "created_at" "tag_name" "checked_at" "expected" "actual" "duration_seconds"

  test:all:
    desc: Run all tests including end-to-end validation
    deps:
      - test
      - test:e2e

  check:
    desc: Run all code quality checks including end-to-end tests
    cmds:
      - task: fix
      - task: format
      - task: typecheck
      - task: lint
      - task: complexity
      - task: test:all

  check:parallel:
    desc: Run all code quality checks with parallel tests (faster)
    cmds:
      - task: fix
      - task: format
      - task: typecheck
      - task: lint
      - task: complexity
      - task: test:parallel
      - task: test:e2e

  run:
    desc: Run the application
    cmds:
      - uv run python -m appimage_updater {{.CLI_ARGS}}

  docs:build:
    desc: Build documentation with MkDocs
    cmds:
      - echo "📚 Building documentation..."
      - uv run mkdocs build {{.CLI_ARGS}} 2>&1 | grep -v "MERMAID2.*Found superfences config" | grep -v "MERMAID2.*Initialization arguments" | grep -v "MERMAID2.*Using javascript library" || true
      - echo "✅ Documentation built successfully in site/"

  docs:serve:
    desc: Serve documentation locally for development
    cmds:
      - echo "🌍 Starting documentation server..."
      - uv run mkdocs serve {{.CLI_ARGS}}

  docs:
    desc: Build and serve documentation locally (alias for docs:serve)
    deps:
      - docs:serve

  build:
    desc: Build distribution packages (wheel and sdist)
    deps:
      - clean
    cmds:
      - echo "🏗️  Building AppImage Updater distribution packages..."
      - uv build {{.CLI_ARGS}}
      - echo "✅ Build complete! Packages created in dist/"
      - ls -la dist/

  ci:
    desc: Complete CI pipeline - run all checks, build, docs, and show version before pushing to GitHub
    cmds:
      - echo "🚀 Starting CI pipeline..."
      - task: check:parallel
      - task: build
      - task: docs:build
      - task: version
      - echo "✅ CI pipeline completed successfully! Ready to push to GitHub 🎉"

  clean:
    desc: Clean up generated files
    cmds:
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - rm -rf .mypy_cache/
      - rm -rf .pytest_cache/
      - rm -rf dist/
      - rm -rf build/
      - rm -rf site/

  dev:
    desc: Set up development environment
    deps:
      - install
    cmds:
      - echo "Development environment ready!"

  version:
    desc: Display the current project version
    cmds:
      - python3 -c "import tomllib; f = open('pyproject.toml', 'rb'); data = tomllib.load(f); f.close(); print(f'v{data[\"project\"][\"version\"]}')"

  version:bump:
    desc: Bump the patch version, build, commit, and deploy locally
    cmds:
      - echo "🔍 Checking for uncommitted changes..."
      - |
        if [ -n "$(git status --porcelain)" ]; then
          echo "❌ Error: There are uncommitted changes. Please commit or stash them first."
          git status --short
          exit 1
        else
          echo "✅ Working directory is clean"
        fi
      - echo "📈 Bumping version..."
      - uv run version_bumper bump patch
      - echo "✅ Version bumped! New version:"
      - task: version
      - echo "🏗️  Building package..."
      - task: build
      - echo "📝 Committing version bump..."
      - |
        NEW_VERSION=$(python3 -c "import tomllib; f = open('pyproject.toml', 'rb'); data = tomllib.load(f); f.close(); print(data['project']['version'])")
        git add pyproject.toml
        git commit -m "chore: bump version to v$NEW_VERSION"
        echo "✅ Committed version bump to v$NEW_VERSION"
      - echo "🚀 Installing locally with pipx..."
      - pipx install --force dist/*.whl
      - echo "✅ Successfully deployed appimage-updater v$(task version) locally!"
      - echo "🎉 Workflow complete! You can now use the updated version."

  version:tag:
    desc: Create and push a git tag for the current version
    deps:
      - version
    cmds:
      - python3 -c "import tomllib; f = open('pyproject.toml', 'rb'); data = tomllib.load(f); f.close(); version = data['project']['version']; print(f'Creating tag v{version}...'); import subprocess; subprocess.run(['git', 'tag', f'v{version}'], check=True); subprocess.run(['git', 'push', 'origin', f'v{version}'], check=True); print(f'✅ Tag v{version} created and pushed to origin!')"

  default:
    desc: Show available tasks
    cmds:
      - task --list
