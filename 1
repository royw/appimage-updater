task: Available tasks for this project:
* _check_tmp:                  Internal task to check for hardcoded /tmp/ paths
* _output:                     Internal task to output messages silently
* build:                       Build distribution packages
* check:                       Run all code quality checks including end-to-end tests
* ci:                          Run GitHub CI build locally using scripts/ci-local.sh.  This is the same pipeline that runs on GitHub Actions.
* clean:                       Clean up generated files
* complexity:                  Analyze code complexity with radon
* default:                     Show available tasks
* deploy:                      Deploy the built package locally with pipx
* docs:                        Build and serve documentation locally
* format:                      Format code with ruff (including import sorting) and format markdown files with mdformat
* install:                     Install project dependencies (first-time setup) into .venv/
* lint:                        Run all linting tasks
* make:                        Complete build pipeline - run all checks, build, docs, and show version
* metrics:                     Display comprehensive project metrics summary
* resync:                      Resync project dependencies by first deleting .venv/ and then syncing with uv into .venv/
* run:                         Run the application
* sync:                        Sync project dependencies with uv into .venv/
* test:                        Run tests with pytest (sequential) - excludes regression tests - full coverage reporting
* version:                     Display the current project version
* docs:build:                  Build documentation with MkDocs
* docs:serve:                  Serve documentation locally for development
* env:check:                   Verify development environment setup
* fix:emoji:                   Remove emojis from markdown and test files (*.md, docs/*.md, tests/*.py)
* format:markdown:             Format markdown files with mdformat
* format:scripts:              Format scripts with ruff (including import sorting)
* format:src:                  Format source code with ruff (including import sorting)
* format:tests:                Format tests with ruff (including import sorting)
* lint:deadcode:               Find dead (unreachable/unused) code with deadcode
* lint:duplication:            Check for duplicate code using pylint
* lint:emoji:                  Search for emojis in source code, docs, and configuration files
* lint:fix:                    Automatically fix linting issues with ruff
* lint:fix:tests:              Automatically fix linting issues with ruff
* lint:markdown:               Lint markdown files with pymarkdownlnt
* lint:mypy:                   Run type checking with mypy
* lint:ruff:                   Run linting with ruff
* lint:scripts:                Run linting with ruff and check for hardcoded /tmp/ paths
* lint:tests:                  Run linting with ruff and check for hardcoded /tmp/ paths
* test:all:                    Run all tests against all Python versions (excludes regression) - summary coverage reporting
* test:coverage:               Run all tests with coverage reporting (excludes regression tests) - full coverage reporting
* test:e2e:                    Run end-to-end tests to validate core functionality (serially for test isolation) - summary coverage reporting
* test:functional:             Run functional tests only - summary coverage reporting
* test:integration:            Run integration tests only - summary coverage reporting
* test:parallel:               Run tests with pytest - unit/functional/integration in parallel, E2E serially - excludes regression tests - summary coverage reporting
* test:pattern-matching:       Test pattern matching functionality specifically - summary coverage reporting
* test:regression:             Run regression tests to validate fixed issues (uses network) - full coverage reporting
* test:unit:                   Run unit tests only - summary coverage reporting
* version:bump:                Bump the patch version, build, and commit changes
* version:pyproject:           Extract version from pyproject.toml (internal task)
* version:tag:                 Create and push a git tag for the current version
task: Task "2" does not exist
