[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "appimage-updater"
version = "0.4.13"
description = "A Linux service for automating finding and downloading AppImage applications"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Roy Wright", email = "roy@wright.org" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Archiving :: Packaging",
]
dependencies = [
    "httpx>=0.25.0",
    "importlib-metadata>=8.7.0",
    "loguru>=0.7.0",
    "packaging>=23.0",
    "pydantic>=2.5.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "deadcode>=2.4.0",
    "mkdocs>=1.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-git-revision-date-plugin>=0.3.2",
    "mkdocs-literate-nav>=0.6.2",
    "mkdocs-material>=9.6.18",
    "mkdocs-mermaid2-plugin>=1.2.2",
    "mkdocstrings[python]>=0.30.0",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-anyio>=0.0.0",
    "pytest-cov>=6.2.1",
    "radon>=6.0.1",
    "ruff>=0.12.11",
    "trio>=0.30.0",
    "version-bumper>=0.1.2",
]

[project.scripts]
appimage-updater = "appimage_updater.main:cli_main"

[tool.hatch.build.targets.wheel]
packages = ["src/appimage_updater"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Additional strictness for better type safety
disallow_any_generics = true
disallow_subclassing_any = true
# Enable additional error codes for better checking
enable_error_code = ["misc", "type-arg", "assignment"]

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # flake8-bandit
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
    "C901", # mccabe complexity
    "E402", # Module level import not at top of file
    "TID",  # flake8-tidy-imports (detects banned imports and import style issues)
    "PLC",  # Pylint convention
]
ignore = [
    "S101",  # Use of assert detected
    "TID252", # Prefer absolute imports over relative imports (we'll fix this separately)
]
per-file-ignores = { "tests/*" = ["S101"] }

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
# Configure ruff's built-in isort to match project preferences
known-first-party = ["appimage_updater"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
lines-after-imports = 2
force-single-line = false
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.lint.flake8-tidy-imports]
# Ban function-level imports - all imports should be at module level
ban-relative-imports = "all"


[tool.pytest.ini_options]
testpaths = ["tests/unit", "tests/functional"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/appimage_updater",
    "--cov-report=term:skip-covered",
    "--cov-report=html",
    "--cov-config=pyproject.toml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m not slow')",
]
# The e2e test warnings are caused by AsyncMockMixin._execute_mock_call creating unawaited coroutines in test mocks. These are test infrastructure issues that:
#
# Don't affect test functionality
# Don't affect production code
# Are safe to suppress
#
# Affected Tests:
#
# - test_add_command_with_invalid_url
# - test_add_command_with_direct_flag
# - test_add_with_direct_flag_modern
# - test_add_github_repository_modern
# - test_add_duplicate_name_error_modern
# - test_add_path_expansion_modern
# - test_pattern_matching_with_suffixes
#
# The remaining RuntimeWarning printed after tests complete is from cleanup code (http_service.py:136) and doesn't affect test results or CI success.
filterwarnings = [
    "ignore:coroutine.*AsyncMockMixin.*was never awaited:RuntimeWarning",
    "ignore::RuntimeWarning:appimage_updater.core.http_service",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]
parallel = false
concurrency = ["thread"]

[tool.coverage.paths]
source = ["src/", "*/site-packages/"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[dependency-groups]
dev = [
    "deadcode>=2.4.0",
    "mkdocs>=1.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-git-revision-date-plugin>=0.3.2",
    "mkdocs-literate-nav>=0.6.2",
    "mkdocs-material>=9.6.18",
    "mkdocs-mermaid2-plugin>=1.2.2",
    "mkdocstrings[python]>=0.30.0",
    "mypy>=1.17.1",
    "pylint>=3.3.8",
    "pytest>=8.4.1",
    "pytest-anyio>=0.0.0",
    "pytest-cov>=6.2.1",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.8.0",
    "radon>=6.0.1",
    "ruff>=0.12.11",
    "trio>=0.30.0",
    "version-bumper>=0.1.2",
]
